@inject IJSRuntime JS

<EditForm Model="@this" OnValidSubmit="@SendMessageAsync">
    <label class="input-box page-width">
        <textarea @ref="@textArea" @bind="@messageText" placeholder="Type your message..." rows="1"></textarea>

        <div class="tools">
            <button type="submit" title="Send" class="send-button">
                <MudIcon Icon="@Icons.Material.Filled.Send"/>
            </button>
        </div>
    </label>
</EditForm>

@code {
    private ElementReference textArea;
    private string? messageText;

    [Parameter]
    public EventCallback<ChatMessage> OnSend { get; set; }

    public ValueTask FocusAsync()
        => textArea.FocusAsync();

    private async Task SendMessageAsync()
    {
        if (messageText is { Length: > 0 } text)
        {
            messageText = null;
            await OnSend.InvokeAsync(new ChatMessage(ChatRole.User, text));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Chat/ChatInput.razor.js");
                await module.InvokeVoidAsync("init", textArea);
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
